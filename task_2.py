"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def list_fill(num, lst_obj):
    """
    Заполнение списка, выборка элемента для инкременции осуществляется путем подстановки остатка от деления
    :param num: Проверяемое число
    :param lst_obj: Список содержащий количество четных и нечетных чисел
    :return: Возвращается список
    """
    lst_obj[num % 2] += 1
    return lst_obj


def even_and_odd(num, lst_obj):
    if num <= 0:
        return f'Четных: {lst_obj[0]}, нечетных: {lst_obj[1]}'
    else:
        return even_and_odd(num // 10, list_fill(num % 10, lst_obj))


print(even_and_odd(25646542105247872101, [0, 0]))